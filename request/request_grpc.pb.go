// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: request.proto

package request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleServer_Request_FullMethodName = "/simpleServer/Request"
)

// SimpleServerClient is the client API for SimpleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServerClient interface {
	Request(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type simpleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServerClient(cc grpc.ClientConnInterface) SimpleServerClient {
	return &simpleServerClient{cc}
}

func (c *simpleServerClient) Request(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SimpleServer_Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServerServer is the server API for SimpleServer service.
// All implementations must embed UnimplementedSimpleServerServer
// for forward compatibility
type SimpleServerServer interface {
	Request(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedSimpleServerServer()
}

// UnimplementedSimpleServerServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleServerServer struct {
}

func (UnimplementedSimpleServerServer) Request(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedSimpleServerServer) mustEmbedUnimplementedSimpleServerServer() {}

// UnsafeSimpleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServerServer will
// result in compilation errors.
type UnsafeSimpleServerServer interface {
	mustEmbedUnimplementedSimpleServerServer()
}

func RegisterSimpleServerServer(s grpc.ServiceRegistrar, srv SimpleServerServer) {
	s.RegisterService(&SimpleServer_ServiceDesc, srv)
}

func _SimpleServer_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServerServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimpleServer_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServerServer).Request(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleServer_ServiceDesc is the grpc.ServiceDesc for SimpleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simpleServer",
	HandlerType: (*SimpleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _SimpleServer_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request.proto",
}
